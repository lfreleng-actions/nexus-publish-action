---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# nexus-publish-action
name: 'üì¶ Nexus Publishing'

description: 'Publishes content to Sonatype Nexus Repository servers'
# Uploading tool supporting 20+ Nexus repository formats

inputs:
  # Mandatory
  nexus_server:
    description: 'Nexus server URL (e.g., https://nexus.example.com)'
    required: true
  nexus_password:
    description: 'Nexus password for authentication'
    required: true
  repository_name:
    description: 'Nexus repository name'
    required: true
  files_path:
    description: 'Path to files directory or specific file to upload'
    required: true
  # Optional
  nexus_username:
    description: 'Nexus username for authentication'
    required: false
  file_pattern:
    description: 'File pattern, valid when specified path is a directory'
    # e.g., '*.tgz', '*.jar', '*.whl', '*'
    required: false
    default: '*'
  repository_format:
    description: 'Repository format/type'
    required: false
    default: 'raw'
  upload_path:
    # Caution: format-specific
    description: 'Upload path within the repository'
    required: false
    default: ''
  coordinates:
    # Caution: format-specific
    description: 'Artifact coordinates'
    # e.g. 'groupId=com.example artifactId=app version=1.0.0' for Maven)
    required: false
    default: ''
  metadata:
    # Caution: format-specific
    description: 'Additional metadata as JSON string'
    required: false
    default: '{}'
  validate_checksum:
    description: 'Validate file checksums before upload'
    required: false
    default: 'true'
  permit_fail:
    # Important; this is the default behaviour, publishing failures permitted
    description: 'Do not exit/error when some content fails to upload'
    required: false
    default: 'true'

outputs:
  published_files:
    description: 'List of successfully published files'
    value: ${{ steps.publish.outputs.published_files }}
  publication_count:
    description: 'Number of files successfully published'
    value: ${{ steps.publish.outputs.publication_count }}
  failed_count:
    description: 'Number of files that failed to publish'
    value: ${{ steps.publish.outputs.failed_count }}

runs:
  using: 'composite'
  steps:
    - name: 'Validate inputs'
      id: validate
      shell: bash
      run: |
        # Validate inputs
        if [ -z "${{ inputs.nexus_server }}" ]; then
          echo "Error: nexus_server input is required ‚ùå"
          exit 1
        fi
        if [ -z "${{ inputs.nexus_password }}" ]; then
          echo "Error: nexus_password input is required ‚ùå"
          exit 1
        fi
        if [ -z "${{ inputs.files_path }}" ]; then
          echo "Error: files_path input is required ‚ùå"
          exit 1
        fi

        # Check if files path exists
        if [ ! -e "${{ inputs.files_path }}" ]; then
          echo "Error: Files path '${{ inputs.files_path }}' does not exist ‚ùå"
          exit 1
        fi

        # Validate repository format
        format="${{ inputs.repository_format }}"
        valid_formats='raw maven2 npm docker helm pypi nuget rubygems apt yum'
        valid_formats="$valid_formats rpm composer conan conda r go p2 gitlfs"
        valid_formats="$valid_formats cocoapods bower"
        if ! echo "$valid_formats" | grep -w "$format" > /dev/null; then
          echo "Error: Invalid repository format $format ‚ùå"
          echo "Supported formats:"
          echo "$valid_formats"
          exit 1
        fi

        if [ -z "${{ inputs.nexus_username }}" ]; then
          # Extract repository name from GITHUB_REPOSITORY
          repo_name=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          echo "Setting Nexus username to GitHub repository: $repo_name"
          echo "nexus_username=$repo_name" >> "$GITHUB_ENV"
        else
          echo "nexus_username=${{ inputs.nexus_username }}" >> "$GITHUB_ENV"
        fi

        echo 'All required inputs validated ‚úÖ'
        echo "Repository format: $format"

    - name: 'Publish artifacts to Nexus'
      id: publish
      shell: bash
      run: |
        # Publish artifacts to Nexus
        nexus_url="${{ inputs.nexus_server }}"
        nexus_user="${{ env.nexus_username }}"
        nexus_pass="${{ inputs.nexus_password }}"
        files_path="${{ inputs.files_path }}"
        repo_name="${{ inputs.repository_name }}"
        repo_format="${{ inputs.repository_format }}"
        file_pattern="${{ inputs.file_pattern }}"
        upload_path="${{ inputs.upload_path }}"
        coordinates="${{ inputs.coordinates }}"
        metadata="${{ inputs.metadata }}"
        validate_checksum="${{ inputs.validate_checksum }}"

        # Remove trailing slash from nexus_url if present
        nexus_url="${nexus_url%/}"

        # Ensure nexus_url has a protocol scheme
        if [[ "$nexus_url" != http://* ]] &&
           [[ "$nexus_url" != https://* ]]; then
          echo "‚ö†Ô∏è  Warning: nexus_server URL '$nexus_url' missing protocol"
          echo "   scheme. Assuming HTTPS. If you need HTTP, specify"
          echo "   'http://' explicitly"
          nexus_url="https://${nexus_url}"
        fi

        echo "üîó Using Nexus server URL: $nexus_url"

        # Function to calculate checksums
        calculate_checksums() {
          local file="$1"
          md5sum=$(md5sum "$file" | cut -d' ' -f1)
          sha1sum=$(sha1sum "$file" | cut -d' ' -f1)
          sha256sum=$(sha256sum "$file" | cut -d' ' -f1)
        }

        # Function to get upload URL based on format
        get_upload_url() {
          local format="$1"
          local filename="$2"
          local coordinates="$3"
          local upload_path="$4"

          case "$format" in
            "raw")
              if [ -n "$upload_path" ]; then
                upload_path=$(echo "$upload_path" |
                            sed 's|^/||; s|/$||')
                base_url="${nexus_url}/repository/${repo_name}/${upload_path}"
                echo "${base_url}/${filename}"
              else
                echo "${nexus_url}/repository/${repo_name}/${filename}"
              fi
              ;;
            "maven2")
              # Parse Maven coordinates
              groupId=$(echo "$coordinates" |
                      sed -n 's/.*groupId=\([^ ]*\).*/\1/p')
              artifactId=$(echo "$coordinates" |
                         sed -n 's/.*artifactId=\([^ ]*\).*/\1/p')
              version=$(echo "$coordinates" |
                      sed -n 's/.*version=\([^ ]*\).*/\1/p')
              classifier=$(echo "$coordinates" |
                         sed -n 's/.*classifier=\([^ ]*\).*/\1/p')

              if [ -z "$groupId" ] || [ -z "$artifactId" ] ||
                 [ -z "$version" ]; then
                echo "Error: Maven format requires groupId, artifactId,"
                echo "       and version in coordinates"
                return 1
              fi

              group_path=$(echo "$groupId" | tr '.' '/')
              base_name="${artifactId}-${version}"
              if [ -n "$classifier" ]; then
                base_name="${base_name}-${classifier}"
              fi
              base_url="${nexus_url}/repository/${repo_name}/${group_path}"
              echo "${base_url}/${artifactId}/${version}/${filename}"
              ;;
            "npm")
              # npm format: /@scope/package/-/package-version.tgz or
              # /package/-/package-version.tgz
              package_name=$(echo "$filename" | sed 's/-[0-9].*//')
              if [[ "$package_name" == @* ]]; then
                base_url="${nexus_url}/repository/${repo_name}/${package_name}"
                echo "${base_url}/-/${filename}"
              else
                base_url="${nexus_url}/repository/${repo_name}/${package_name}"
                echo "${base_url}/-/${filename}"
              fi
              ;;
            "pypi")
              # PyPI format: /packages/source/f/first-letter/package_name/
              # filename
              package_name=$(echo "$filename" | sed 's/-[0-9].*//')
              first_letter=$(echo "$package_name" | cut -c1 |
                           tr '[:upper:]' '[:lower:]')
              base_url="${nexus_url}/repository/${repo_name}/packages"
              base_url="${base_url}/source"
              file_url="${base_url}/${first_letter}/${package_name}"
              file_url="${file_url}/${filename}"
              echo "$file_url"
              ;;
            "nuget")
              # NuGet format: /package_name/version/filename
              package_name=$(echo "$coordinates" |
                           sed -n 's/.*id=\([^ ]*\).*/\1/p')
              version=$(echo "$coordinates" |
                      sed -n 's/.*version=\([^ ]*\).*/\1/p')
              if [ -z "$package_name" ] || [ -z "$version" ]; then
                package_name=$(echo "$filename" | sed 's/\.[0-9].*//')
                version=$(echo "$filename" |
                        sed -n 's/.*\.\([0-9][0-9.]*\)\.nupkg/\1/p')
              fi
              base_url="${nexus_url}/repository/${repo_name}/${package_name}"
              echo "${base_url}/${version}/${filename}"
              ;;
            "helm")
              # Helm format: Nexus typically stores helm charts in raw format
              # Some Nexus installations might require specific paths for helm
              if [ -n "$upload_path" ]; then
                upload_path=$(echo "$upload_path" | sed 's|^/||; s|/$||')
                base_url="${nexus_url}/repository/${repo_name}/${upload_path}"
                echo "${base_url}/${filename}"
              else
                echo "${nexus_url}/repository/${repo_name}/${filename}"
              fi
              ;;
            "docker")
              echo "Error: Docker format requires special handling"
              echo "       with registry API"
              return 1
              ;;
            *)
              # Default to raw format
              if [ -n "$upload_path" ]; then
                upload_path=$(echo "$upload_path" | sed 's|^/||; s|/$||')
                base_url="${nexus_url}/repository/${repo_name}/${upload_path}"
                echo "${base_url}/${filename}"
              else
                echo "${nexus_url}/repository/${repo_name}/${filename}"
              fi
              ;;
          esac
        }

        # Function to upload file with format-specific logic
        upload_file() {
          local file="$1"
          local filename=$(basename "$file")

          echo "üîç Processing: $filename for format: $repo_format"

          # Calculate checksums if validation is enabled
          if [ "$validate_checksum" = "true" ]; then
            calculate_checksums "$file"
            echo "  MD5: $md5sum"
            echo "  SHA1: $sha1sum"
            echo "  SHA256: $sha256sum"
          fi

          # Get upload URL
          upload_url=$(get_upload_url "$repo_format" \
            "$filename" "$coordinates" "$upload_path")
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to determine upload URL for $filename"
            return 1
          fi

          echo "üì§ Uploading: $filename"
          echo "   Format: $repo_format"
          echo "   Repository: $repo_name"
          echo "   URL: $upload_url"

          # Prepare curl command based on format
          case "$repo_format" in
            "maven2")
              # Maven uploads often require additional headers
              curl_cmd="curl -s -f --max-redirs 0 -w '%{http_code}\n'"
              curl_cmd="$curl_cmd -u '${nexus_user}:${nexus_pass}'"
              curl_cmd="$curl_cmd -H 'Content-Type: application/octet-stream'"
              curl_cmd="$curl_cmd --upload-file '$file' '$upload_url'"
              ;;
            "npm")
              # npm might require specific content type
              curl_cmd="curl -s -f --max-redirs 0 -w '%{http_code}\n'"
              curl_cmd="$curl_cmd -u '${nexus_user}:${nexus_pass}'"
              curl_cmd="$curl_cmd -H 'Content-Type: application/x-compressed'"
              curl_cmd="$curl_cmd --upload-file '$file' '$upload_url'"
              ;;
            "pypi")
              # PyPI uploads typically use multipart/form-data
              curl_cmd="curl -s -f --max-redirs 0 -w '%{http_code}\n'"
              curl_cmd="$curl_cmd -u '${nexus_user}:${nexus_pass}'"
              curl_cmd="$curl_cmd -F 'content=@$file' '$upload_url'"
              ;;
            *)
              # Default upload method
              curl_cmd="curl -s -f --max-redirs 0 -w '%{http_code}\n'"
              curl_cmd="$curl_cmd -u '${nexus_user}:${nexus_pass}'"
              curl_cmd="$curl_cmd --upload-file '$file' '$upload_url'"
              ;;
          esac

          # Execute upload and capture response
          response=$(eval "$curl_cmd" 2>&1)
          curl_exit_code=$?

          # Extract HTTP status code from the response
          # (last line due to -w '%{http_code}\n')
          http_code=$(echo "$response" | tail -n 1)
          # Remove last line (cross-platform compatible)
          response_body=$(echo "$response" | sed '$d')

          # Check for successful upload by examining curl exit code,
          # HTTP status, and response content
          if [ $curl_exit_code -eq 0 ]; then
            # Check HTTP status code (2xx range indicates success)
            if [[ "$http_code" =~ ^2[0-9][0-9]$ ]]; then
              # Additional validation: check if response contains HTML
              # (indicating an error page)
              if echo "$response_body" | grep -q "<html>\|<HTML>"; then
                echo "   Error: failed to upload $filename ‚ùå"
                echo "   HTTP Status: $http_code, but received HTML error"
                echo "   response"
                echo "   Response body: $response_body"
                sanitized_curl_cmd=$(echo "$curl_cmd" | \
                  sed -E "s/-u '[^']*'/[REDACTED]/g")
                echo "   Command: $sanitized_curl_cmd"
                return 1
              else
                echo "   Success: uploaded $filename ‚úÖ"
                echo "   HTTP Status: $http_code"

                # Upload checksums if validation is enabled and format
                # supports it
                if [ "$validate_checksum" = "true" ] &&
                   [[ "$repo_format" =~ ^(maven2|raw)$ ]]; then
                  auth_opts="-u ${nexus_user}:${nexus_pass}"
                  echo "$md5sum" | curl -s -f $auth_opts \
                    --data-binary @- "${upload_url}.md5" || true
                  echo "$sha1sum" | curl -s -f $auth_opts \
                    --data-binary @- "${upload_url}.sha1" || true
                  echo "$sha256sum" | curl -s -f $auth_opts \
                    --data-binary @- "${upload_url}.sha256" || true
                  echo "  üìã Checksums uploaded"
                fi

                return 0
              fi
            else
              echo "   Failed to upload: $filename ‚ùå"
              echo "   HTTP Status: $http_code (expected 2xx for success)"
              echo "   Response body: $response_body"
              sanitized_curl_cmd=$(echo "$curl_cmd" | \
                sed -E "s/-u '[^']*'/[REDACTED]/g")
              echo "   Command: $sanitized_curl_cmd"
              return 1
            fi
          else
            echo "   Failed to upload: $filename ‚ùå"
            echo "   curl exit code: $curl_exit_code"
            echo "   HTTP Status: $http_code"
            echo "   Response: $response_body"
            sanitized_curl_cmd=$(echo "$curl_cmd" | \
              sed -E "s/-u '[^']*'/[REDACTED]/g")
            echo "   Command: $sanitized_curl_cmd"
            return 1
          fi
        }

        # Prepare upload path
        if [ -n "$upload_path" ]; then
          upload_path=$(echo "$upload_path" | sed 's|^/||; s|/$||')
          if [ -n "$upload_path" ]; then
            upload_path="/${upload_path}"
          fi
        fi

        published_files=""
        count=0
        failed_count=0

        echo "üöÄ Starting Nexus Publishing/Upload"
        echo "üìã Configuration:"
        echo "   Server: $nexus_url"
        echo "   Repository: $repo_name"
        echo "   Format: $repo_format"
        echo "   Files path: $files_path"
        echo "   File pattern: $file_pattern"
        if [ -n "$upload_path" ]; then
          echo "   Upload path: $upload_path"
        fi
        if [ -n "$coordinates" ]; then
          echo "   Coordinates: $coordinates"
        fi

        # Find files based on the specified path and pattern
        if [ -f "$files_path" ]; then
          target_files="$files_path"
        elif [ -d "$files_path" ]; then
          if [ "$file_pattern" = "*" ]; then
            target_files=$(find "$files_path" -type f)
          else
            target_files=$(find "$files_path" -name "$file_pattern" -type f)
          fi
        else
        echo "Error: Invalid files_path; must be file or directory ‚ùå"
          exit 1
        fi

        if [ -z "$target_files" ]; then
          echo "Warning: no files found matching pattern $file_pattern ‚ö†Ô∏è"
          echo "Path: $files_path"
          echo "published_files=" >> "$GITHUB_OUTPUT"
          echo "publication_count=0" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        echo "Found files to publish üì¶"
        echo "$target_files"
        echo ""

        # Upload each file
        for target_file in $target_files; do
          if [ ! -f "$target_file" ]; then
            echo "Skipping non-existent file: $target_file ‚ö†Ô∏è"
            continue
          fi

          if upload_file "$target_file"; then
            filename=$(basename "$target_file")
            if [ -z "$published_files" ]; then
              published_files="$filename"
            else
              published_files="$published_files,$filename"
            fi
            count=$((count + 1))
          else
            failed_count=$((failed_count + 1))
          fi
          echo ""
        done

        echo "üìä Publication Summary:"
        echo "  - Total files processed: $((count + failed_count))"
        echo "  - Successfully published: $count"
        echo "  - Failed uploads: $failed_count"
        echo "  - Repository format: $repo_format"
        echo "  - Published files: $published_files"

        # Set outputs
        echo "published_files=$published_files" >> "$GITHUB_OUTPUT"
        echo "publication_count=$count" >> "$GITHUB_OUTPUT"

        # Add to step summary
        echo '## üì¶ Nexus Publisher' >> "$GITHUB_STEP_SUMMARY"
        echo "- **Repository format:** $repo_format" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Total files published:** $count" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Failed uploads:** $failed_count" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Repository:** $repo_name" >> "$GITHUB_STEP_SUMMARY"
        echo "- **Server:** $nexus_url" >> "$GITHUB_STEP_SUMMARY"
        if [ -n "$upload_path" ]; then
          echo "- **Upload path:** $upload_path" >> "$GITHUB_STEP_SUMMARY"
        fi
        if [ "$count" -gt 0 ]; then
          summary_file="$GITHUB_STEP_SUMMARY"
          echo "- **Published files:** $published_files" >> "$summary_file"
        fi

        # Do NOT exit with error by default if some uploads failed
        if [ "$failed_count" -gt 0 ] && \
           [ "f${{ inputs.permit_fail }}" = 'ftrue' ]; then
          echo "Some uploads failed; for details check job output ‚ö†Ô∏è" \
            >> "$GITHUB_STEP_SUMMARY"

        # Exit with error only when publishing failures NOT tolerated
        elif [ "$failed_count" -gt 0 ] && \
             [ "f${{ inputs.permit_fail }}" != 'ftrue' ]; then
          echo "Some uploads failed; for details check job output ‚ùå" \
            >> "$GITHUB_STEP_SUMMARY"
          exit 1
        else
          echo "### All content published successfully üéâ" \
            >> "$GITHUB_STEP_SUMMARY"
        fi
